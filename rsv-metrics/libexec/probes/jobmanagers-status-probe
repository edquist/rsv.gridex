#!/usr/bin/env perl

###############################################################################
##
## Copyright 2009, The Trustees of Indiana University. 
##
## Open Science Grid Operations Team, Indiana University
## Original Author: Arvind Gopu (http://peart.ucs.indiana.edu)
##
## This Perl script tests if the specified job manager functions normally
## Type ./jobmanagers-status-probe -h for more information
##
## REQUIRES
##  'RSV::Probe_Base'
##
################################################################################

######## Perl modules to use ######################################
use strict;
use RSVProbeBase;

######## Retrieve Global variables ################################
## And alias to RSV::Probe_Base variables
our %o;         *o         = \%RSVProbeBase::o;      
our %metric;    *metric    = \%RSVProbeBase::metric;

&RSVProbeBase::Init();
&RSVProbeBase::Run();

################################################################################
## Main Program ends ##
################################################################################


################################################################################
## Local Sub-Routines
################################################################################

sub Init {

    &RSVProbeBase::Set_MultiMetric ("true");

    &RSVProbeBase::Set_MetricName ("org.osg.batch.jobmanager-default-status");

    ## Pass "status" or "performance" depending on metric type
    &RSVProbeBase::Set_MetricType ("status");
    &RSVProbeBase::Set_ServiceType ("OSG-CE");
    &RSVProbeBase::Set_ServiceVersion (">= OSG CE 1.0.0");
    &RSVProbeBase::Set_ProbeType ("OSG-CE");

    ## Should automating tools run this probe on above probeType by default?
    &RSVProbeBase::Set_EnableByDefault ("true");
    
    ## Unix cron type metric interval
    &RSVProbeBase::Set_MetricInterval (int(rand(60)). " * * * *");

    ## Define this value from RCS/SVN version
    ## What version of the WLCG specification does this probe conform to?
    &RSVProbeBase::Set_ProbeRevision ('3.0');
    &RSVProbeBase::Set_ProbeSpecVersion ("0.91");

    ## Basic intro for the probe; This string will be used by Print_Usage ()
    &RSVProbeBase::Set_ProbeHelpIntro 
	("IMPORTANT NOTE: This probe can test status of different job managers; So\n".
	 " it is REQUIRED to specify a metric using the -m argument as shown below.\n\n".
	 "Probe to verify if a job manager works as expected, on the remote host.\n".
	 " Submits a test job to the specified job manager, and check its status. ".
	 "\nIf -m org.osg.batch.jobmanager-default-status is specified, then the probe\n".
	 " tries to submit a test job to the default jobmanager on the resource, ie.\n".
	 " the jobmanager indicated by \$OSG_JOB_CONTACT on the CE.\n");

    ## Additional options to print in Usage info used by Print_Usage ()
    &RSVProbeBase::Set_ProbeHelpOptions 
	("                                  To list all the possible metric names you\n".
	 "                                   can specify as value to this switch, type\n".
	 "                                   \"./jobmanagers-status-probe -m all -l\"\n".
	 " [--status-check-wait-time        Time (in seconds) to wait before checking\n".
	 "                 <integer>]        status of submitted test job.");

    ## Uncomment if you want additional command line options
     &RSVProbeBase::Extra_CLI_Option ("status-check-wait-time=i","globusJobStatusDelaySeconds");

    ## Uncomment if you do not want detailsData to be trimmed to $o{'detailsDataMaxLength}
    ## &RSVProbeBase::Set_DetailsDataTrim ("False");
}


sub Run {
    ###########################################################################
    ##### Begin special section since this is a multi metric probe ##### 
    ###########################################################################

    ## Process some simple options, and exit if they're specified after acting
    &Process_Multi_Metrics ();

    ## Copy jobManager provided -- AG: not ideal programming but this version is
    ##  200 times cleaner than previous version! :)
    $o{'jobManager'} = $o{'jobmanagerMetricJmString'}{$o{'metric'}};
    &RSVProbeBase::Verbose ("JM being tested for: $o{'jobManager'} =  o {'jobmanagerMetricJmString'}{$o{'metric'}}\n");

    ###########################################################################
    ##### End special section since this is a multi metric probe ##### 
    ###########################################################################


    ###########################################################################
    &RSVProbeBase::Get_Remote_Env();
    
    ##  Test if jobmanager specified works fine, and then print metric results
    ##  using the jobmanagerStringSuffix key value in our hash
    $o{'callingRoutine'} = "$o{'probeName'}::Run ()";

    &RSVProbeBase::Globus_Job_Submit_Error_Code (" $o{'sleepCmd'} 300 2>&1 ", "backtick",3);

    ## First, sleep for a little while after submitting job
    &RSVProbeBase::Verbose ("Going to sleep $o{'globusJobStatusDelaySeconds'} seconds...\n");
    sleep $o{'globusJobStatusDelaySeconds'};  
	
    ## Check job status using $o{'globusjobId'}
    &RSVProbeBase::Globus_Job_Status ($o{'globusjobId'}, "backtick");

    ## Check for possibly busy batch system -- sleep longer, and check again
    if ($o{'globusjobStatus'} =~ "UNSUBMITTED") {
	&RSVProbeBase::Verbose (" Got status $o{'globusjobStatus'} for Job ID:[$o{'globusjobId'}];\n\t Sleeping again - possibly busy system\n");
	sleep ($o{'globusJobStatusDelaySeconds'} * 2);  
	&RSVProbeBase::Globus_Job_Status ($o{'globusjobId'},"backtick");
    }

    ## Using same method I used in osg-directories-probe
    &RSVProbeBase::Exit_Error(2, "Job submission to \"$o{'hostName'}/$o{'jobManager'}\" succeeded and job status when last checked was an invalid one (\"$o{'globusjobStatus'}\");\"") if (!($o{'validBatchJobStatuses'} =~ $o{'globusjobStatus'}));

    &RSVProbeBase::Set_Summary_Metric_Results (0, "Job submission to \"$o{'hostName'}/$o{'jobManager'}\" succeeded and job status when last checked was a valid one (\"$o{'globusjobStatus'}\"); ");

    &RSVProbeBase::Print_Metric();
}

## Main Program ends ##
################################################################################


################################################################################
###### Local Sub routines begin ###########
################################################################################




################################################################################
##
##  Process_Informational_Arguments ()
##
## OUTPUT: 
##  None
##
## RETURNS:
##  None
## 
################################################################################

sub Process_Multi_Metrics {

    ## Additional details for this multi-metric probe
    $o{'jobmanagerMetricJmString'}{'org.osg.batch.jobmanager-default-status'} = "jobmanager";
    $o{'jobmanagerMetricJmString'}{'org.osg.batch.jobmanager-fork-status'} = "jobmanager-fork";
    $o{'jobmanagerMetricJmString'}{'org.osg.batch.jobmanager-managedfork-status'} = "jobmanager-managedfork";
    $o{'jobmanagerMetricJmString'}{'org.osg.batch.jobmanager-condor-status'} = "jobmanager-condor";
    $o{'jobmanagerMetricJmString'}{'org.osg.batch.jobmanager-pbs-status'} = "jobmanager-pbs";
    $o{'jobmanagerMetricJmString'}{'org.osg.batch.jobmanager-loadleveler-status'} = "jobmanager-loadleveler";
    $o{'jobmanagerMetricJmString'}{'org.osg.batch.jobmanager-lsf-status'} = "jobmanager-lsf";

    ## Do above step for each metric possible
    if (defined ($o{'listmetric'})) {
	foreach my $metric_name (sort keys %{$o{'jobmanagerMetricJmString'}}) {
	    &RSVProbeBase::Set_MetricName($metric_name);
	    if ($metric_name =~ /default/) {
		&RSVProbeBase::Set_EnableByDefault("true");
	    } else { &RSVProbeBase::Set_EnableByDefault("false"); } 
	    &RSVProbeBase::Set_MetricInterval (int(rand(60)). " * * * *");
	    &RSVProbeBase::List_Summary_Metric();
	}
	exit 0;
    } 
}

#!/usr/bin/env perl

use strict;
use warnings;
use Getopt::Long qw(GetOptions);
use File::Basename;
use Date::Manip;

use RSVMetric;

print_output_header();

######## Retrieve Global variables ################################
our %o;
our %metric;
# Set $run_me_root to 1 if conditions arise such that we should give
# local probe run instructions in the event of a problem. Set to >1 if
# we should give local probe run instructions regardless of
# metricStatus.
my $run_me_root = 0;
my ($is_root, $probeconfig_problems, $soaphost, $probename,
    $sitename, $enabled, $datafolder, $workingfolder, $real_datafolder,
    $probe_in_cron, $current_gratia_probe_type,
    $record_count, $file_count, $archive_count, $old_file_count,
    $real_gratia_probe_type
   );

my %extra_opts = ("discover"       => "<Show available probes on this system>",
                  "human-readable" => "<Print output in readable format>");

my %options = process_command_line(%extra_opts);

$options{'discover'} ||= 0;
$options{'human-readable'} ||= 0;

($o{'gratiaProbeType'} = $options{'m'}) =~ s/^org\.osg\.gratia\.//;

Run();


sub Run {

  if ($options{discover}) {
    &discoverProbesToTest();
  }

  $is_root = not $<;		# Are we running as root?

  # Probe type
  $current_gratia_probe_type = gratiaProbeType();
  $real_gratia_probe_type = ($current_gratia_probe_type =~ /pbs|lsf/) ? 'pbs-lsf' : $current_gratia_probe_type;
  unless ($current_gratia_probe_type) {
    setCritical();
    &appendDetailsData(<<EOF);
ERROR: Probe type must be set with -p! Run with --discover (add -X for
human-readable output) to find possible values on this system.
EOF
    normal_exit()
  }

  ####################################
  # Start tests

  if($ENV{OSG_LOCATION}) {
    my @PYTHONPATH = ();
    @PYTHONPATH = split /:/, $ENV{PYTHONPATH} if  $ENV{PYTHONPATH};
    unless (grep m&^\Q$ENV{OSG_LOCATION}/gratia/probe/common\E$&, @PYTHONPATH) {
      push @PYTHONPATH, "$ENV{OSG_LOCATION}/gratia/probe/common";
      $ENV{PYTHONPATH} = join(":", @PYTHONPATH);
    }

    $ENV{PATH} = "$ENV{PATH}:$ENV{OSG_LOCATION}/wget/bin";
  }

  # Check directories
  unless (checkProbeDirs()) {
    setUnknown();
    normal_exit();
  }

  $soaphost = getProbeConfigAttribute("SOAPHost");
  if (!defined($soaphost) || length($soaphost) == 0) {
    $soaphost = getProbeConfigAttribute("CollectorHost");
  }
  $probename = getProbeConfigAttribute("MeterName");
  if (!defined($probename) || length ($probename) == 0) {
    $probename = getProbeConfigAttribute("ProbeName");
  }
  $sitename = getProbeConfigAttribute("SiteName");
  $enabled = getProbeConfigAttribute("EnableProbe");
  $datafolder = getProbeConfigAttribute("DataFolder");
  $datafolder =~ s&/$&&;
  $workingfolder = getProbeConfigAttribute("WorkingFolder");
  $real_datafolder = `(cd "$datafolder" >/dev/null 2>&1 && /bin/pwd)`;
  chomp $real_datafolder;

  my $cron_grep_pattern = "^\\s*[^#].*gratia/\\(probe/\\)\\?$real_gratia_probe_type/";
  my $probe_in_crontab = system("crontab -l 2>/dev/null| grep -e '$cron_grep_pattern' >/dev/null 2>&1") == 0;
  my $probe_in_cron_d = system("grep -e '$cron_grep_pattern' /etc/cron.d/* >/dev/null 2>&1") == 0;
  $probe_in_cron = ($probe_in_crontab or $probe_in_cron_d);

  ################################
  # Check some basic critical stuff

  # Is probe in crontab (if it's supposed to be)?
  if ($current_gratia_probe_type =~
      m&^(?:sge|pbs|lsf|pbs-lsf|condor|glexec)&i and
      $probe_in_cron != 1) {
    if ($is_root) {
      setCritical();
      &appendDetailsData("ERROR: Probe $probename is not listed in crontab or cron.d.\n");
    } else {
      #&appendDetailsData("Not root: cannot examine crontab (not a critical error).\n");
    }
  }
  # Is probe enabled?
  if ($enabled ne "1") {
    setCritical();
    &appendDetailsData("ERROR: Probe $probename has EnableProbe not set to 1.\n");
    $run_me_root = 1;
    $probeconfig_problems = 1;
  }
  # Is probename generic or unset?
  if ($probename =~ m&(?:generic|unknown)&i) {
    setCritical();
    &appendDetailsData("ERROR: MeterName $probename appears to be generic (critical error).\n");
    $probeconfig_problems = 1;
    normal_exit();
  }

  # Do we have the correct permissions on the datafolder?
  my (@rdf_stat) = stat $real_datafolder;
  if ($current_gratia_probe_type =~ m&^(?:sge|pbs|lsf|pbs-lsf|condor)&i) {
    if ($rdf_stat[2] != 041777) {
      setCritical();
      &appendDetailsData(sprintf("%s (found %05o, wanted %05o).",
                                 "WARNING: Data folder $real_datafolder does not have correct permissions (critical error).\n",
                                 $rdf_stat[2],
                                 041777));
    }
  }

  #################################
  # Check format of MeterName
  my @colon_split = split /:/, $probename;
  my $num_colons = $#colon_split;
  if ($num_colons != 1) {
    setWarning();
    &appendDetailsData("WARNING: Not one and only one \`:' in MeterName $probename.\n");
    $probeconfig_problems = 1;
  }

  ################################
  # Check sitename configuration.
  if ((!$sitename) or $sitename =~ m&(?:generic|unknown)&i) {
    setWarning();
    &appendDetailsData (<<EOF);
WARNING: Configured SiteName "$sitename" is empty or generic.
EOF
    $probeconfig_problems = 1;
  }

  ################################
  # Any checks specific to the probe type
  probe_specific_checks();

  ################################
  # Check size of reprocessing queue
  init_find_counts();

  # This replicates the behavior of OpenNewRecordFile() from gratia/common/sandbox_mgmt.py, Gratia version 1.13.9
  # which uses ProbeConfiguration.getFilenameFragment() from gratia/common/common/probe_config.py
  # If that changes, this might become invalid, hence the warning if the directory does not exist.
  # See also SOFTWARE-535.
  my $subdir = "subdir." . ProbeConfiguration_getFilenameFragment($probename, $soaphost);
  $subdir = "$workingfolder/gratiafiles/$subdir";
  if(!-e $subdir) {
      setWarning();
      my $message = "WARNING: The expected directory containing records waiting to be re-sent does not exist ($subdir).  This might be a problem in the gratia-config-probe itself.  Please report this error to OSG for assistance.\n";
      appendDetailsData($message);
  }

  find( { wanted => \&process_find_leaf, follow => 1, follow_skip => 2 }, $subdir);
  my $message="$record_count records waiting to be re-sent to $soaphost in $file_count files (including $archive_count archive files).\n";
  if ($record_count > 1000) {
    setWarning();
    $message = "WARNING: $message";
  }
  &appendDetailsData ($message);
  if ($old_file_count > 0) {
    setWarning();
    &appendDetailsData (sprintf("WARNING: %d %s > 7 days old: please verify CollectorHost setting in ProbeConfig and collector status.\n",
                        $old_file_count, ($old_file_count>1?"files are":"file is")));
  }

  ################################
  # Check number of files in data area, per file type (SOFTWARE-563).

  # (the @{[...]} construct here forces glob to run in list context)
  my $n_certinfo_files   = @{[ glob("$datafolder/gratia_certinfo_*") ]};
  my $n_classad_records  = @{[ glob("$datafolder/history.*"        ) ]};
  my $n_quarantine_files = @{[ glob("$datafolder/quarantine/*"     ) ]};
  my @unsent_records     = glob("$workingfolder/*/*");
  my $n_unsent_records   = @unsent_records;
  my %unsent_by_dir;
  for my $rec (@unsent_records) {
    my ($dir) = ($rec =~ m{(.+)/[^/]+$});
    ++$unsent_by_dir{$dir};
  }
  $unsent_by_dir{$workingfolder} = 0 if $n_unsent_records == 0;

  my $ndata = $n_certinfo_files + $n_classad_records + $n_quarantine_files 
            + $n_unsent_records;

  $message = join("\n  ",
    "$ndata total gratia files found:",
    "$n_certinfo_files gratia_certinfo files under $datafolder/",
    "$n_classad_records classad records under $datafolder/",
    "$n_quarantine_files quarantine files under $datafolder/quarantine/",
    map("$unsent_by_dir{$_} unsent collector records under $_",
        sort keys %unsent_by_dir)
  ) . "\n";

  if ($ndata > 10000) {
    setWarning();
    $message="WARNING: $message";
  }
  &appendDetailsData ($message);

  ################################
  # Check last contact time with Gratia server.
  my $probe_contact_check =
    `wget -q --tries=1 --timeout=10 -O - 'http://$soaphost/gratia-administration/monitor-status.html?probename=$probename'`;
  chomp $probe_contact_check;
  $probe_contact_check =~ s&^last-contact=([^\s]+)\s+([^\s]+?)\|?$&${1} ${2}&;

  # Check to see if we've ever had a contact with this collector
  if ($probe_contact_check =~ /^last-contact=never/) {
    setCritical();
    $run_me_root = 1;
    &appendDetailsData ("ERROR: Probe $probename has never been seen by Gratia collector $soaphost\n");
    normal_exit();
  }

  # This means either the collector didn't respond or we've checked in at least once.
  $probe_contact_check = ParseDate($probe_contact_check);
  my $last_contact_string = UnixDate($probe_contact_check, "%Y-%m-%d %T %Z");
  my $cmpDateHour = DateCalc("today", "- 1 hour");
  my $cmpDateDay = DateCalc("today", "- 1 day");
  my $probe_seen_by_soaphost;
  if (!$probe_contact_check) {
    setWarning();
    &appendDetailsData (<<EOF);
WARNING: Gratia server $soaphost not responding to obtain last contact details.
EOF
  } elsif (Date_Cmp($probe_contact_check, $cmpDateDay) < 1) {
    setCritical();
    $run_me_root = 1;
    &appendDetailsData (<<EOF);
ERROR: Probe $probename has not been seen by Gratia collector $soaphost in >1d.
Last contact time = $last_contact_string.
EOF
    normal_exit();
  } elsif (Date_Cmp($probe_contact_check, $cmpDateHour) < 1) {
    setWarning();
    $run_me_root = 1;
    &appendDetailsData (<<EOF);
WARNING: Probe $probename has not been seen by Gratia collector $soaphost in >1h.
Last contact time = $last_contact_string
EOF
  } else {
    $probe_seen_by_soaphost = 1;
    &appendDetailsData (<<EOF);
Probe $probename has sent data to Gratia collector within the last hour.
EOF
  }

  ################################
  # Cross-check locally configured site name matches Gratia server sitename.
  # Note: don't do this for metric probes going to the GOC.
  if ($probe_seen_by_soaphost && !(($current_gratia_probe_type eq "metric") && ($soaphost =~ /grid\.iu\.edu/))) {
    my $probe_site_check =
      system("wget -q --tries=1 --timeout=10 -O - 'http://$soaphost/gratia-administration/monitor-status.html?sitename=$sitename' 2>/dev/null | grep -e '^\\(probename=\\)\\{0,1\\}$probename\[|:][ 	]*last-contact=' >/dev/null 2>&1") == 0;
    if (!$probe_site_check) {
      setWarning();
      &appendDetailsData (<<EOF);
WARNING: Probe $probename not found in check of probes reporting to $soaphost from $sitename.
Check Collector SiteName translation on $soaphost
wget -q --tries=1 --timeout=10 -O - 'http://$soaphost/gratia-administration/monitor-status.html?sitename=$sitename' 2>/dev/null | grep -e '^\(probename=\)\{0,1\}$probename\[|:][ 	]*last-contact='
EOF
    } else {
      &appendDetailsData (<<EOF);
Configured site name ($sitename) for probe $probename matches Gratia translation.
EOF
    }
  }

  ################################
  # Check log file for jobs reported.

  normal_exit(1);
}


sub runMeRoot {
  &appendDetailsData (<<EOF);
Run tests as root for more diagnostic details, especially if you have a
WARNING or CRITICAL status.
Manual invocation:
EOF
  my $dir = dirname($0);
  $dir=qx^cd "$dir" && /bin/pwd^;
  chomp $dir;
  $dir =~ s&worker-scripts/?&&;
  &appendDetailsData (sprintf("(cd \"%s\" && ./worker-scripts/%s -X -p %s)\n",
                              $dir,
                              basename($0),
                              $metric{'metricName'}));
}

sub probeConfigProblems {
  &appendDetailsData (<<EOF);
Please check ProbeConfig for problems.
EOF
}

sub normal_exit {
  return if $o{test} and not $_[0];
  probeConfigProblems() if $probeconfig_problems;
  if ($run_me_root and not $is_root and
      ($o{metricStatus} or $run_me_root > 2)) {
    runMeRoot();
  }
  ## Print metric, and we're all done!
  if ($options{'human-readable'}) {
    # Want human-readable results
    my $statusWord = metricStatusWord();
    workerScriptOutput(0, <<EOF, "");
STATUS: $statusWord
DETAILS:
$metric{'detailsData'}
EOF
  } else {
    # Force the metric to always have a status; defaults to OK (0).
    exists $metric{'metricStatus'} or $metric{'metricStatus'} = 0;
    workerScriptOutput(0,"$metric{'metricStatus'}\n$metric{'detailsData'}\n","");
  }
}


sub setCritical {
  $metric{'metricStatus'} = 2; #critical
}

sub setWarning {
  $metric{'metricStatus'} = 1 unless ## "WARNING" unless
    (exists $metric{'metricStatus'} and $metric{'metricStatus'} == 2); ## "CRITICAL";
}

sub setUnknown {
  $metric{'metricStatus'} = 3 unless ## "UNKNOWN" unless
    (exists $metric{'metricStatus'} and $metric{'metricStatus'} == 2); ## "CRITICAL";
}

sub metricStatusWord {
    exists $metric{'metricStatus'} or $metric{'metricStatus'} = 0;
    
    if (0 == $metric{'metricStatus'}) {
        return "OK";
    }
    elsif (1 == $metric{'metricStatus'}) {
        return "WARNING";
    }
    elsif (2 == $metric{'metricStatus'}) {
        return "CRITICAL";
    }
    elsif (3 == $metric{'metricStatus'}) {
        return "UNKNOWN";
    }
    else {
        # Fallback
        return $metric{'metricStatus'};
    }
}

sub probe_specific_checks {
  if ($current_gratia_probe_type =~ m&(?:pbs|pbs-lsf|lsf)&i) {
    # PBS / LSF probe checks
    probe_check_pbs_lsf();
  } elsif ($current_gratia_probe_type eq "condor") {
    probe_check_condor();
  }
}

sub probe_check_condor() {
  my $get_condor_config_cmd = "condor_config_val PER_JOB_HISTORY_DIR";

  if($ENV{OSG_LOCATION}) {
      $get_condor_config_cmd = ". $ENV{OSG_LOCATION}/setup.sh; $get_condor_config_cmd";
  }
  else {
      # If Condor is not installed in the default location we will go looking for it.
      if (system("which condor_config_val >/dev/null 2>&1") != 0) {
          open(IN, '<', '/etc/globus/globus-condor.conf');
          my $condor_config_val;
          my $condor_config;
          while(<IN>) {
              if(/^condor_submit\s*=\s*\"(.+)\"/ ) {
                  ($condor_config_val = $1) =~ s/condor_submit/condor_config_val/;
              }
              if(/^condor_config\s*=\s*\"(.+)\"/) {
                  $condor_config = $1;
              }
          }

          if($condor_config_val and $condor_config) {
              $get_condor_config_cmd = "CONDOR_CONFIG=$condor_config $condor_config_val PER_JOB_HISTORY_DIR";
          }
          else {
              setUnknown();
              &appendDetailsData (<<EOF);
Could not find condor_config_val command or CONDOR_CONFIG: could
not check for presence of PER_JOB_HISTORY_DIR attribute in condor
schedd configuration.
Please check manually.
EOF
              return 0;
              
          }
      }
  }

  my $cmd_output = `$get_condor_config_cmd 2>&1`;
  my $status = $?;
  if ($status == 0) {
    # Make sure we're not suffering from alias problems.
    chomp $cmd_output;
    $cmd_output = `(cd "$cmd_output" >/dev/null 2>&1 && /bin/pwd)`
      if $cmd_output;
    chomp $cmd_output;
  }
  if ($status == 127 or $cmd_output =~ m&command not found&) {
    setUnknown();
    &appendDetailsData (<<EOF);
Unable to find condor_config_val command: could not check for presence
of PER_JOB_HISTORY_DIR attribute in condor schedd configuration.
$cmd_output
Please check manually.
EOF
    return 0;
  } elsif ($cmd_output =~ m&^Not defined:&i or $status != 0 or not $cmd_output) {
    setWarning();
    &appendDetailsData (<<EOF);
WARNING: PER_JOB_HISTORY_DIR apparently not set in condor_config or condor_config_val
not operating as expected. Please ensure it is set to "$datafolder" in
condor_config or the schedd machine's local configuration.
EOF
    return 0;
  } else {
    if ($status == 0 and $cmd_output ne $datafolder) {
      setWarning();
      &appendDetailsData (<<EOF);
WARNING: PER_JOB_HISTORY_DIR is apparently set to "$cmd_output"
in condor_config. It should be set to
"$datafolder" as specified in ProbeConfig.
Please rectify in condor_config or the schedd machine's local configuration.
EOF
      return 0;
    }
  }
  return 1;
}

sub probe_check_pbs_lsf {
  my $URCOLLECTOR_LOC = probeDirPath();
  push @INC, $URCOLLECTOR_LOC;
  eval "require urCollector::Configuration";
  if ($@) {                     # FAILED to load configuration module
    setCritical();
    &appendDetailsData (<<EOF);
ERROR: Could not load urCollector::Configuration: $@
Major probe installation problem.
EOF
    normal_exit();
  }
  eval
    urCollector::Configuration::parseConf("$URCOLLECTOR_LOC/urCollector.conf");
  if ($@) {                     # FAILED to parse configuration
    setCritical();
    &appendDetailsData (<<EOF);
ERROR: Could not read $URCOLLECTOR_LOC/urCollector.conf: $@
Please check urCollector.conf file for errors.
EOF
    normal_exit();
  }
  # Check LRMS type setting
  if ($urCollector::Configuration::configValues{lrmsType} !~ m&(?:pbs|lsf)&i) {
    setCritical();
    &appendDetailsData (<<EOF);
ERROR: Unrecognized lrmsType $urCollector::Configuration::configValues{lrmsType} in urCollector.conf
Please check urCollector.conf file for errors.
EOF
    normal_exit();
  }
  # Check LRMS type matches probe type
  if ($current_gratia_probe_type ne "pbs-lsf" and
      $urCollector::Configuration::configValues{lrmsType} ne $current_gratia_probe_type) {
    setCritical();
    &appendDetailsData (<<EOF);
ERROR: Mismatch between probeType $current_gratia_probe_type and configured lrmsType $urCollector::Configuration::configValues{lrmsType} in urCollector.conf.
Please check urCollector.conf file for errors.
EOF
    normal_exit();
  }
  unless ($is_root) {		# Can't do these unless we're root.
    $run_me_root = 2; # Print root message even if we're otherwise OK.
#    &appendDetailsData (<<EOF);
#Remaining checks on $urCollector::Configuration::configValues{lrmsType} require root privilege:
#  * Check existence of configured PBS or LSF log directory.
#  * Check for recent PBS batch log entries.
#  * Check pending XML files in $workingfolder/urCollector.
#EOF
    return;
  }
  # Check log directory
  if ($urCollector::Configuration::configValues{lrmsType} eq "pbs") {
    my $dir = $urCollector::Configuration::configValues{pbsAcctLogDir};
    my $date = UnixDate("today", "%Y%m%d");
    if (not -d $dir) {
      setCritical();
      &appendDetailsData (<<EOF);
ERROR: Configured PBS log directory $dir does not exist.
Check pbsAcctLogDir in urCollector.conf.
EOF
      normal_exit();
    }
    my $nfiles = `ls -1 $dir | wc -l`;
    chomp $nfiles;
    if (!$nfiles) {
      setCritical();
      &appendDetailsData (<<EOF);
ERROR: No files found in configured PBS log directory $dir.
Check pbsAcctLogDir in urCollector.conf.
EOF
      normal_exit();
    } elsif ((not -e "$dir/$date") and (not -e "$dir/$date.gz")) {
      setWarning();
      &appendDetailsData (<<EOF);
WARNING: Configured PBS log directory $dir does not contain entries for today.
Check pbsAcctLogDir in urCollector.conf and contents of $dir.
EOF
    }
  } elsif ($urCollector::Configuration::configValues{lrmsType} eq "lsf") {
    my $dir = $urCollector::Configuration::configValues{lsfAcctLogDir};
    if (not -d $dir) {
      setCritical();
      &appendDetailsData (<<EOF);
ERROR: Configured LSF log directory $dir does not exist.
Check lsfAcctLogDir in urCollector.conf.
EOF
      normal_exit();
    } elsif (not -e "$dir/lsb.events") {
      setWarning();
      &appendDetailsData (<<EOF);
WARNING: No log file $dir/lsb.events.
Check lsfAcctLogDir in urCollector.conf and contents of $dir.
EOF
    }
    # Check PBS files waiting to be converted to Gratia files
    my $npending = `(cd "$workingfolder/urCollector" >/dev/null 2>&1 && ls -1 | wc -l)`;
    chomp $npending;
    &appendDetailsData ("$npending XML files waiting to be sent to $soaphost\n");
    if ($npending > 2000) {
      setWarning();
    }
  }
}

sub checkProbeDirs {
  my $probe_dir = probeDirPath();
  my $probe_config_dir = probeConfigPath();
  return (checkDirReadable($probe_dir, "$current_gratia_probe_type probe directory") and
          checkDirReadable($probe_config_dir, "$current_gratia_probe_type probe configuration directory") and
          checkFileReadable("$probe_config_dir/ProbeConfig", "$current_gratia_probe_type probe configuration"));
}

sub checkDirReadable {
  my ($dir, $description) = @_;
  if (-d $dir and -r $dir) {
    return 1;
  } else {
    &appendDetailsData (<<EOF);
DirectoryCheck: $dir ($description) does not exist or is not readable.
EOF
#    if (not $is_root) {
#      &appendDetailsData (<<EOF);
#DirectoryCheck: Re-run as root?
#EOF
#    }
    return 0;
  }
}

sub checkFileReadable {
  my ($file, $description) = @_;
  if (-f $file and -r $file) {
    return 1;
  } else {
    &appendDetailsData (<<EOF);
FileCheck: $file ($description) does not exist or is not readable.
EOF
#    if (not $is_root) {
#      &appendDetailsData (<<EOF);
#FileCheck: Re-run as root?
#EOF
#    }
    return 0;
  }
}

sub getProbeConfigAttribute {
  my $probeConfigPath = probeConfigPath();
  my $probeConfig_cmd = $ENV{OSG_LOCATION} ? 
      "( source $ENV{OSG_LOCATION}/setup.sh; cd \"$probeConfigPath\"; ../common/GetProbeConfigAttribute.py %s )" : 
      "( cd \"$probeConfigPath\"; /usr/share/gratia/common/GetProbeConfigAttribute %s )";

  my @results = ();

  foreach my $configAttribute (@_) {
    my $cmd = sprintf($probeConfig_cmd, $configAttribute);
    push @results, `$cmd 2>/dev/null`;
  }

  chomp @results;
  if (wantarray) {
    return @results;
  } else {
    return $results[0];
  }
}

sub gratiaProbeType {

  return $o{'gratiaProbeType'}; ## $o{'gratiaProbeTypes'}{$metric{'metricName'}} || "UNKNOWN";
}

sub probeDirPath {
    if($ENV{OSG_LOCATION}) {
        return ($real_gratia_probe_type) ? "$ENV{OSG_LOCATION}/gratia/probe/$real_gratia_probe_type" : "<unknown>";
    }
    return ($real_gratia_probe_type) ? "/usr/share/gratia/$real_gratia_probe_type" : "<unknown>";
}

sub probeConfigPath {
    if($ENV{OSG_LOCATION}) {
        return ($real_gratia_probe_type) ? "$ENV{OSG_LOCATION}/gratia/probe/$real_gratia_probe_type" : "<unknown>";
    }
    return ($real_gratia_probe_type) ? "/etc/gratia/$real_gratia_probe_type" : "<unknown>";
}

sub appendDetailsData {
    my $string = shift;
    $metric{'detailsData'} .= $string if ($string);
}

sub discoverProbesToTest {
  my $output = undef;

  my $probedir = (defined $ENV{OSG_LOCATION}) ? "$ENV{OSG_LOCATION}/gratia/" : "/usr/share/gratia";

  unless (-d $probedir) {
    workerScriptOutput(1,"", "ERROR: gratia-config-probe-helper: no directory $probedir!");
  }

  unless (opendir(DIR, $probedir)) {
    workerScriptOutput(1,"", "ERROR: gratia-config-probe-helper: unable to open directory for $probedir!");
  }

  # Execute probe once per probe directory.
  my @dirs = ();
  while (my $dir = readdir DIR) {
    next unless -d "$probedir/$dir";
    next if $dir =~ m&^\.+$&;
    next if $dir =~ m&^(?:test|common)$&;
    push @dirs, $dir;
  }
  closedir(DIR);
  if ($options{'human-readable'}) {
    $output = "Found probes: \n";
    foreach my $dir (@dirs) {
      $output = "${output}$dir\n";
    }
  } else {
    $output = "<probes>\n";
    foreach my $dir (@dirs) {
      $output = "${output}  <probe>$dir</probe>\n";
      $o{'gratiaProbeTypes'}{"org.osg.gratia.$dir"} = $dir;
    }
    $output .= "</probes>";
  }
  workerScriptOutput(0,$output,"");
}


## Print exit code, stdout, stderr in format expected by rsv-control
sub workerScriptOutput {
    if ($options{'human-readable'}) {
        my $probe_dir = probeDirPath();
        print <<EOF;
Exit code: $_[0]
EOF
        if ($current_gratia_probe_type) {
            print <<EOF;
Probe type: $current_gratia_probe_type
Probe dir: $probe_dir
Diagnostic output:
EOF
        }
        print "$_[1]" if $_[1];
        print "$_[2]" if $_[2];
    }
    else {
        print metricStatusWord() . "\n";
        print $_[1];
        print STDERR $_[2];
    }

    exit 0;
}

use File::Find;
sub init_find_counts {
  $record_count = $file_count = $archive_count = $old_file_count = 0;
}

sub process_find_leaf {
  -f or return;
  my $uncompress_arg;
  if (m&\.tar(?:\.(bz2|gz))?$&) {
    ++$archive_count;
    $uncompress_arg = ($1?(($1 eq "bz2")?"j":"z"):"");
    my $tar_count = `(tar ${uncompress_arg}tvf $File::Find::name | grep -ve '^d' | wc -l) 2>/dev/null`;
    chomp $tar_count;
    if ($tar_count and $tar_count > 0) {
      $record_count += $tar_count;
    }
  } else {
    ++$record_count;
  }
  ++$file_count;
  ++$old_file_count if int(-M _) > 7;
}

# based on ProbeConfiguration.getFilenameFragment() from gratia/common/probe_config.py
# Gratia version 1.13.9, 2013-03-29
sub ProbeConfiguration_getFilenameFragment {
    my ($probename, $soaphost) = @_;
    my $fragment = "${probename}_$soaphost";
    $fragment =~ s{[:/]}{_}g;
    return $fragment;
}

__END__
### Local Variables:
### mode: cperl
### End:

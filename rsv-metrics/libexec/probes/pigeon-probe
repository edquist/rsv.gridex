#!/usr/bin/env perl

###############################################################################
##
## Copyright 2009, The Trustees of Indiana University. 
##
## Open Science Grid Operations Team, Indiana University
## Original RSV Author: Arvind Gopu (http://peart.ucs.indiana.edu)
## Probe created by: Doug Strain, 2010 (dstrain@fnal.gov)
##
## This Perl script tests if the srm works via srm-tester interface
## Requires the bestman srm-tester application to be installed
##
## REQUIRES
##  'RSV::Probe_Base'
##
################################################################################

######## Perl modules to use ######################################
use strict;
use RSVProbeBase;

# Pigeon Global Variables
#
# test_vo: the virtual organization that you would like to discover
# For instance, if you set this to "Engage", it will find all srm and 
# classic Storage elements accessible to a user of vo Engage.
    our $test_vo="Engage";




######## Retrieve Global variables ################################
## And alias to RSV::Probe_Base variables
our %o;         *o         = \%RSVProbeBase::o;      
our %metric;    *metric    = \%RSVProbeBase::metric;

## All the operations (metrics) this probe supports

	
&RSVProbeBase::Init();
&RSVProbeBase::Run();

################################################################################
## Main Program ends ##
################################################################################


################################################################################
## Local Sub-Routines
################################################################################

## Init
##
## This function uses RSVProbeBase.pm functions to initialize
## probe parameters.
## Service type is OSG-SRM i
## (This to enables probes on configure_osg_rsv with --srm-probes option)
## Probes do not start by default.
sub Init {

    &RSVProbeBase::Set_MultiMetric ("false");

    ## Pass "status" or "performance" depending on metric type
    &RSVProbeBase::Set_MetricType ("status");
    &RSVProbeBase::Set_MetricName ("org.osg.srm.pigeon");
    &RSVProbeBase::Set_ServiceType ("OSG-SRM");
    &RSVProbeBase::Set_ServiceVersion (">= OSG CE 1.0.0");
    &RSVProbeBase::Set_ProbeType ("OSG-SRM");

    ## Should automating tools run this probe on above probeType by default?
    &RSVProbeBase::Set_EnableByDefault ("false");
    
    ## Unix cron type metric interval
    &RSVProbeBase::Set_MetricInterval (int(rand(60)). " * * * *");

    ## Define this value from RCS/SVN version
    ## What version of the WLCG specification does this probe conform to?
    &RSVProbeBase::Set_ProbeRevision ('3.0');
    &RSVProbeBase::Set_ProbeSpecVersion ("0.91");

    ## Basic intro for the probe; This string will be used by Print_Usage ()
    &RSVProbeBase::Set_ProbeHelpIntro 
	("IMPORTANT NOTE: This probe tests different aspects of a storage element\n".
	 " it is REQUIRED to specify a metric using the -m argument as shown below.\n\n".
	 ".\n");

    ## Additional options to print in Usage info used by Print_Usage ()
    &RSVProbeBase::Set_ProbeHelpOptions 
	("                                  To list all the possible metric names you\n".
	 "                                   can specify as value to this switch, type\n".
	 ".");

    ## Uncomment if you want additional command line options
    &RSVProbeBase::Extra_CLI_Option ("srm-client-type=s","srmClientType");
    &RSVProbeBase::Extra_CLI_Option ("srm-client-loc=s","srmClientDir");
    &RSVProbeBase::Extra_CLI_Option ("srm-protocol-version=i","srmProtocolVersion");
    &RSVProbeBase::Extra_CLI_Option ("srm-webservice-path=s","srmWebservicePath");
    &RSVProbeBase::Extra_CLI_Option ("srm-destination-dir=s","srmcpDestinationDir" );
    &RSVProbeBase::Extra_CLI_Option ("srm-tester-dir=s","srmtesterDir" );
    &RSVProbeBase::Extra_CLI_Option ("test-file=s","srmcpTestfile" );

    ## Uncomment if you do not want detailsData to be trimmed to $o{'detailsDataMaxLength}
    &RSVProbeBase::Set_DetailsDataTrim ("False");
}

## Setup_Srm_Metric
##
## Setup default directories
sub Setup_Srm_Metric {
    $o{'srmPortNumber'}  = $o{'portNumber'} if ($o{'portNumber'});
    $o{'srmServiceType'} = $o{'serviceType'} if ($o{'serviceType'});
    if ($o{'srmClientType'} eq "lbnl")
    {
        $o{'srmmkdirCmd'}="$o{'srmClientDir'}/bin/srm-mkdir";
        $o{'srmrmdirCmd'}="$o{'srmClientDir'}/bin/srm-rmdir";
        $o{'srmmvCmd'}="$o{'srmClientDir'}/bin/srm-mv";
        $o{'srmreserveCmd'}="$o{'srmClientDir'}/bin/srm-reserve-space";
        $o{'srmreleaseCmd'}="$o{'srmClientDir'}/bin/srm-release-space";
    }
    else
    {
        $o{'srmmkdirCmd'}="$o{'srmClientDir'}/bin/srmmkdir";
        $o{'srmrmdirCmd'}="$o{'srmClientDir'}/bin/srmrmdir";
        $o{'srmmvCmd'}="$o{'srmClientDir'}/bin/srmmv";
        $o{'srmreserveCmd'}="$o{'srmClientDir'}/bin/srm-reserve-space";
        $o{'srmreleaseCmd'}="$o{'srmClientDir'}/bin/srm-release-space";
    }
}

sub print_file {
	my $outString="metricName: org.srm.pigeon-".$o{'current_type'};
	$outString.="\nmetricType: status";
	$metric{'timestampToPrint'} = $o{'timestamp'};
	$metric{'timestampToPrint'} = $o{'timestampLocal'}
		if (defined($o{'printLocalTimezone'}));
	$outString.="\ntimestamp: ".$metric{'timestampToPrint'};
	$outString.="\nmetricStatus: ".$o{'current_status'};
	$outString.="\nserviceType: OSG-SRM";
	$outString.="\nserviceURI: ".$o{'current_name'};
	$outString.="\ngatheredAt: ".$metric{'gatheredAt'};
	$outString.="\nsummaryData: ".$o{'current_summary'};
	$outString.="\ndetailsData: ".$o{'current_details'};
	$outString.="\nEOT\n";
	#open(PROBE_OUT, ">".$o{'VDT_LOCATION_LOCAL'}."/osg-rsv/output/probes/".time()."-".$o{'current_name'}."__org.srm.pigeon-".$o{'current_type'}.".record");
	print $outString;
}

### Special parser for srm-ping results.
sub ping_parser
{
	# By default, use exit status, unless one of the 
	# special dcache conditions apply:
	&exit_parser;

	if ($o{'cmdOut'} =~/backend_type=dCache/)
	{
		if ($o{'cmdOut'} =~/backend_version=/)
		{
			$o{'current_status'}="OK";
			$o{'current_summary'}="SrmPing OK";

		}
		else
		{
			$o{'current_status'}="critical";
			$o{'current_summary'}="dCache did not provide backend type, Not working.";
		}

	} 
	else
	{	
		if ($o{'cmdOut'} =~/gumsIDMapped=null/)
		{
			$o{'current_status'}="warning";
			$o{'current_summary'}="Srm Ping worked, but did not authenticate to a gums id.";

		}
	}
}

sub exit_parser
{
	if ($o{'cmdExitValue'} == 0){
		$o{'current_status'}="OK";
		$o{'current_summary'}="Command OK";}
	else {
		$o{'current_status'}="critical";
		$o{'current_summary'}="Command Failed";}
	$o{'current_details'}=$o{'cmdOut'};
}

sub grep_parser
{
	$o{'current_summary'}="";
	$o{'current_details'}=$o{'cmdOut'};
	$o{'current_status'}="critical";
	if ($o{'cmdOut'} =~/Permission denied/) 
		{ $o{'current_summary'}="Permission Denied";} 
	if ($o{'cmdOut'} =~/TOTAL_FAILED=1/) 
		{ $o{'current_summary'}="Generic Gridftp failure";} 
	if ($o{'cmdOut'} =~/SRM_FAILURE/) 
		{ $o{'current_summary'}="SRM Command Failed";} 
	if ($o{'cmdOut'} =~/SRM_AUTHORIZATION_FAILURE/) 
		{ $o{'current_summary'}="Authorization Error";} 
	if ($o{'cmdOut'} =~/SRM_AUTHENTICATION_FAILURE/) 
		{ $o{'current_summary'}="Authorization Error";} 
	if ($o{'cmdOut'} =~/AuthorizationException/) 
		{ $o{'current_summary'}="Authorization Error";} 
	if ($o{'cmdOut'} =~/Identity Mapping Service did not permit mapping/) 
		{ $o{'current_summary'}="Globus Authorization error";} 
	if ($o{'cmdOut'} =~/Authorization Service failed/) 
		{ $o{'current_summary'}="Globus Authentication Error";} 
	if ($o{'cmdOut'} =~/SRM_NOT_SUPPORTED/) 
		{ $o{'current_status'}="warning";
		$o{'current_summary'}="Operation not supported";} 
	if ($o{'cmdOut'} =~/SRM_INVALID_PATH/) 
		{ $o{'current_summary'}="Invalid Path";} 
	if ($o{'cmdOut'} =~/SRM_DUPLICATION/) 
		{ $o{'current_status'}="warning";
		$o{'current_summary'}="Path already exists";} 
	if ($o{'cmdOut'} =~/SRM_SUCCESS/) 
		{ $o{'current_status'}="OK";
		$o{'current_summary'}="Invalid Path";} 
	if ($o{'cmdOut'} =~/file exists/) 
		{ $o{'current_status'}="warning";
		$o{'current_summary'}="File already exists";} 
	if ($o{'cmdOut'} =~/org.globus.ftp.exception/) 
		{ $o{'current_summary'}="Gridftp exception";} 
	if ($o{'current_summary'} eq "")
		{&exit_parser;}
}

## Run
##
## This runs the probe.  Essentially just calls srm-tester and 
## records the result.
sub Run {
    ##### Begin special section since this is a multi metric probe ##### 
    ## Process some simple options, and exit if they're specified after acting
    &Process_Multi_Metrics ();
    ## If we this far then probe is in normal operation


    ## Extract probe name from metric name 
    my $probe_name = &RSVProbeBase::Get_MetricName();
    $probe_name    =~ /.*\.srmtester-(.*)$/;
    $probe_name    = $1;

# Set up some global variables
    &Setup_Srm_Metric();
    my $cmd_output="";
    my $op_name=$probe_name;

## Actually call the command now for url generation:
## this will get the storage elements of the test_vo.
	my $sUrlCommand="";
	$sUrlCommand.="get_surl --vo ".$test_vo." --show_storage_element_id";

	#Run command and save output
	&RSVProbeBase::Run_Command ($sUrlCommand, "backtick");
        $cmd_output .= "Command run:".$sUrlCommand . "\n";
        $cmd_output .= $o{'cmdOut'};

	# This will return a list of servers that we will need to parse
	# through, each is on its own line.
	my $outlist=$o{'cmdOut'};
	my $name="";
	my $srm_dest="";
	my $srm_id="";
	for (split /^/, $outlist) 
	{
	# Ignore the first header line.
	  if (!(/STORAGE ELEMENT ID/))
	  {
	
		# Each line is tab seperated, so parse it to get the 
		# srm destination and id.
		my @fields=split(/\s+/,$_);
		$srm_id=$fields[0];
		$srm_dest=$fields[1];
		$srm_dest=~s/TESTFILE/TESTFILE-RSV/;
		$srm_dest.=int(rand(10000));

		# We will need to call discovery tools again in order
		# to get the site name.
		$sUrlCommand="get_site_name_for_seid --storage_element_id ".$srm_id;
		&RSVProbeBase::Run_Command ($sUrlCommand, "backtick");
		$name=$o{'cmdOut'};
		$name=~s/\"//g;

		# If the command returns multiple names
		# (I'm looking at you disapprovingly, BNL-ATLAS)
		# then only take the first one.
		$name=~s/\s+.*//g;
	
		print "sUrl Test: $name $srm_id $srm_dest\n";
		$o{'current_name'}=$name;
		$o{'current_srm'}=$srm_dest;

		# At this point, we have the srm destination, the name, and
		# the id, so we can run the tests on this storage element.
		# Each test below (ping, srmcp, etc)
		# will set up, run the command, then print a file to the 
		# RSV output directory.

		# PING
		$o{'current_type'}="1srmping";
		my $pingCommand="$o{'srmpingCmd'} -2 -retry_num=0 ".$o{'current_srm'}. " 2>&1" ;
		&RSVProbeBase::Run_Command ($pingCommand, "backtick");
		&ping_parser;
		&print_file();

                # srmcp
                if ($o{'current_status'} eq "OK")
                {
                        $o{'current_type'}="2srmcp";
                        my $cpCommand="$o{'srmcpCmd'} -retry_num=0 -srm_protocol_version=$o{'srmProtocolVersion'} file:///$o{'srmcpTestfile'} $o{'current_srm'}". " 2>&1";

                        &RSVProbeBase::Run_Command ($cpCommand, "backtick");
                        &grep_parser;
                        &print_file();
                }

		# srmls
		if ($o{'current_status'} eq "OK")
		{
			$o{'current_type'}="3srmls";
			my $lsCommand="$o{'srmlsCmd'} -2 -retry_num=0 ".$o{'current_srm'}. " 2>&1";
			&RSVProbeBase::Run_Command ($lsCommand, "backtick");
			&grep_parser;
                	&print_file();		
		}

		#srmrm
                if ($o{'current_status'} eq "OK")
                {
                        $o{'current_type'}="4srmrm";
                        my $rmCommand="$o{'srmrmCmd'} -2 -retry_num=0 ".$o{'current_srm'}. " 2>&1";
                        &RSVProbeBase::Run_Command ($rmCommand, "backtick");
                        &grep_parser;
                        &print_file();
                }
		my $dir = $o{'current_srm'};
		$dir =~ s/TESTFILE/TESTDIR/;
		$dir.=int(rand(10000));

		#srmmkdir
                if ($o{'current_status'} eq "OK")
                {
                        $o{'current_type'}="5srmmkdir";
                        my $mkdirCommand="$o{'srmmkdirCmd'} -2 -retry_num=0 ".$dir. " 2>&1";
                        &RSVProbeBase::Run_Command ($mkdirCommand, "backtick");
                        &grep_parser;
                        &print_file();
                }

                # srmlsdir
                if ($o{'current_status'} eq "OK")
                {
                        $o{'current_type'}="6srmlsdir";
                        my $lsCommand="$o{'srmlsCmd'} -2 -retry_num=0 ".$dir. " 2>&1";
                        &RSVProbeBase::Run_Command ($lsCommand, "backtick");
                        &grep_parser;
                        &print_file();
                }


		#srmrmdir
                if ($o{'current_status'} eq "OK")
                {
                        $o{'current_type'}="7srmrmdir";
                        my $rmdirCommand="$o{'srmrmdirCmd'} -2 -retry_num=0 ".$dir. " 2>&1";
                        &RSVProbeBase::Run_Command ($rmdirCommand, "backtick");
                        &exit_parser;
                        &print_file();
                }


	  }
	}

	#sUrl Generation finished, now do tUrl Generation

	#This command will return all classic SE's (gsiftp servers)
        my $tUrlCommand="";
        $tUrlCommand.="get_gridftp_url --vo ".$test_vo." --show_storage_element_id";

        #Run command and save output
        &RSVProbeBase::Run_Command ($tUrlCommand, "backtick");
        $cmd_output .= "Command run:".$tUrlCommand . "\n";
        $cmd_output .= $o{'cmdOut'};

        my $outlist=$o{'cmdOut'};
        my $name="";
        my $srm_dest="";
        my $srm_id="";

	# Same as before, parse the output and call the discovery tools
	# to get the storage id.
        for (split /^/, $outlist)
        {
          if (!(/STORAGE ELEMENT ID/))
          {
                # PING
                my @fields=split(/\s+/,$_);
                $srm_id=$fields[0];
                $srm_dest=$fields[1];
                $srm_dest=~s/TESTFILE/TESTFILE-RSV/;
		$srm_dest.=int(rand(10000));

                $tUrlCommand="get_site_name_for_seid --storage_element_id ".$srm_id;
                &RSVProbeBase::Run_Command ($tUrlCommand, "backtick");
                $name=$o{'cmdOut'};
		$name=~s/\"//g;
		$name=~s/\s+.*//g;
                print "tUrl Test: $name $srm_id $srm_dest\n";


		# Now call globus-url-copy to test copy functionality.
                $o{'current_name'}=$name;
                $o{'current_srm'}=$srm_dest;
                $o{'current_type'}="globuscopy";
		my $gsiCommand="globus-url-copy file:///$o{'srmcpTestfile'} $o{'current_srm'}". " 2>&1";
		print $gsiCommand;
                &RSVProbeBase::Run_Command ($gsiCommand, "backtick");
                &grep_parser;
                &print_file();

		#Clean-up: use globus-job-run to delete the files
		my $job_dest=$o{'current_srm'};
		$job_dest =~ s/gsiftp\:\/\///;
		$job_dest =~ s/\:\d+\/(.*)/:2119\/jobmanager-fork/;
		my $job_file=$1;
		$job_file =~ s/TESTFILE-RSV\d+/TESTFILE-RSV*/;
		
		$gsiCommand="globus-job-run $job_dest /bin/sh -c '/bin/rm -f /$job_file'";
		print "\n\nCleanup: $gsiCommand\n";
                &RSVProbeBase::Run_Command ($gsiCommand, "backtick");
                
	  }
	}









	&RSVProbeBase::Set_Summary_Metric_Results (0, "Pigeon tools finished on $metric{'hostName'}. Output: $cmd_output");
	&RSVProbeBase::Exit();

}

## Main Program ends ##
################################################################################


################################################################################
###### Local Sub routines begin ###########
################################################################################




################################################################################
##
##  Process_Informational_Arguments ()
##
## OUTPUT: 
##  None
##
## RETURNS:
##  None
## 
################################################################################

sub Process_Multi_Metrics {

    if (defined ($o{'listmetric'})) {
            &RSVProbeBase::Set_MetricName("org.osg.srm.surltester");
            &RSVProbeBase::Set_EnableByDefault("false");
            &RSVProbeBase::Set_MetricInterval (int(rand(60))." * * * *");
            &RSVProbeBase::List_Summary_Metric();
        exit 0;
        }
}

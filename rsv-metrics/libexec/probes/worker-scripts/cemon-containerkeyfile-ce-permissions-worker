#!/usr/bin/env perl

###############################################################################
##
## ReSS Project, Fermi National Accelerator Laboratory
## Original Author(s): Parag Mhashilkar 
##
## This is a worker script that will be called by
##  cemon-containerkeyfile-ce-permissions-probe
##
## It returns a string on stdout with "ls -ld" info in XML format
##
################################################################################

my ($cmd_out,  $cmd_exit, $combined_err, $combined_out) = undef;
my $error_count = 0;

&Print_Worker_Script_Xml (1, "", &Error_String("This worker script takes no arguments")) if ($#ARGV > 0);

# Check if OSG_LOCATION is set
my $name = "OSG_LOCATION";
#my $name = "VDT_LOCATION";
my $path = $ENV{$name} if ($ENV{$name});
#my $configparam_keyfile = "sslcertfile";
my $configparam_keyfile = "sslkeyfile";


&isError ((!defined($path)), "\$$name not set properly, skipping.");

my $cmd = "source $path/setup.sh; grep $configparam_keyfile $path/glite/etc/glite-ce-monitor/cemonitor-config.xml | awk -F'=' '{print \$NF}'";

#my $cmd = "source $path/setup.sh; grep sslkeyfile /tmp/cemonitor-config.xml | awk -F'=' '{print \$NF}'";

$cmd_out = `$cmd`;
$cmd_exit = ($? >> 8);
chomp($cmd_out);

my $keyfile = $cmd_out;
$keyfile =~ s/"//g;

&isError ($cmd_exit, "Error while finding the location of container key file") if ($cmd_exit ne 0);

&isError (1, "Container key file $keyfile does not exist") if (not -e $keyfile);

$cmd = "stat --format=%a " . $keyfile . " 2>&1";
$cmd_out = `$cmd`;
$cmd_exit = ($? >> 8);
&isError ($cmd_exit, "Error while executing stat on $keyfile") if ($cmd_exit ne 0);

$cmd_out =~ s/\s*$//s; ## Remove trailing spaces/newlines;

$combined_out = "\n  <File>\n" . 
       "   <Name>Container Key</Name>\n".
       "   <Path>" . &Escape_String($keyfile) ."</Path>\n" .
       "   <Permission>" . &Escape_String($cmd_out) ."</Permission>\n" .
       "  </File>\n";


&Print_Worker_Script_Xml ($error_count, $combined_out, $combined_err);

#print $combined_out;

#&Print_Worker_Script_Xml ($error_count, $combined_out, $combined_err);

###### END MAIN PROGRAM #####

## Print exit code, stdout, stderr in format expected by RSVProbeBase perl module
sub Print_Worker_Script_Xml {
    print "<?xml version=\"1.0\" encoding=\"ISO8859-1\" ?>\n<WorkerScriptOutput>\n";
    print " <ExitCode>".$_[0] ."</ExitCode>\n";
    print " <StdOut>".  $_[1]. " </StdOut>\n";
    print " <StdErr>".  $_[2]. "\n </StdErr>\n";
    print "</WorkerScriptOutput>\n";
    exit $_[0];
}

sub isError {
    my $tmp_exit   = $_[0];
    my $err_string = $_[1];

    if ($tmp_exit != 0) {
	$error_count ++;
	$combined_err .= &Error_String($err_string);
	return 1;
    }
    return 0;
}


sub Error_String {
    my $string = shift;
    return "\n  <Error>" . &Escape_String($string) . "</Error>";
}

sub Escape_String {
    my $string = shift;
    $string =~ s/\"/\\\"/g;
    $string =~ s/\$/\\\$/g;
    $string =~ s/\'/\\\'/g;
    $string =~ s/\&/\\\&/g;
#    $string =~ s/\n/\\n/g;
#    $string =~ s/\>/\\\>/g;
    return $string;
}

#!/usr/bin/python

import os
import re
import subprocess
import sys
import rsvprobe

sys.path.insert(0, '.')
class PerfsonarSimpleProbe(rsvprobe.RSVProbe):
    """
    TODO - write description of the probe
    """

    def __init__(self):
        rsvprobe.RSVProbe.__init__(self)
        self.metric = ""
        metric = rsvprobe.RSVMetric("Perfsonar-Monitor",
                                    "org.osg.general.perfsonar-simple", rsvprobe.RSVMetric.STATUS)
        self.supported_metrics = [metric]
        self.details = "---\n"
    

    def parseopt(self):
        """parse options specific to network monitroing probe and return options, optlist and reminder to
        allow further processing
        """
        options, optlist, remainder = rsvprobe.RSVProbe.parseopt(self)
        for opt, arg in options:
            if self.host == self.localhost:
                self.is_local = True
            else:
                self.is_local = False
        return options, optlist, remainder

    def runCallerScript(self,node):
        #Runs the caller script for esmond and parses the result 
        cmd = "source ./esmondCaller.sh %s %d" % ("http://" + self.host, 86400)
        ec, out = rsvprobe.run_command(cmd, workdir="/usr/libexec/rsv/probes/worker-scripts")
        if 'Error' in out:
            self.return_critical("Failed running the caller. Error message %s" % (out))
        return 0
    
    def run(self):
       """Main routine for the probe"""
       self.parseopt()
       self.runCallerScript(self.host)
       self.return_ok("Everything ok")

def main():
    probe = PerfsonarSimpleProbe()
    return probe.run()

if __name__ == '__main__':
    sys.exit(main())
    

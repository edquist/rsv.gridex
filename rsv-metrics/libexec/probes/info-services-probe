#!/usr/bin/env perl

###############################################################################
##
## Copyright 2009, The Trustees of Indiana University. 
##
## Open Science Grid Operations Team, Indiana University
## Original Author: Arvind Gopu (http://peart.ucs.indiana.edu)
##
## This Perl script tests if a CE's information services are configured properly
##
## Type ./info-services-probe -h for more information
##
## REQUIRES
##  'RSVProbe_Base'
##
################################################################################

######## Perl modules to use ######################################
use strict;
use RSVProbeBase;

######## Retrieve Global variables ################################
## And alias to RSV::Probe_Base variables
our %o;         *o         = \%RSVProbeBase::o;      
our %metric;    *metric    = \%RSVProbeBase::metric;

&RSVProbeBase::Init();
&RSVProbeBase::Run();

################################################################################
## Main Program ends ##
################################################################################


################################################################################
## Local Sub-Routines
################################################################################

sub Init {

    &RSVProbeBase::Set_MultiMetric ("true");

    ## Pass "status" or "performance" depending on metric type
    &RSVProbeBase::Set_MetricType ("status");
    &RSVProbeBase::Set_ServiceType ("OSG-CE");
    &RSVProbeBase::Set_ServiceVersion (">= OSG CE 1.0.0");
    &RSVProbeBase::Set_ProbeType ("OSG-CE");

    ## Define this value from RCS/SVN version
    &RSVProbeBase::Set_ProbeRevision ('$Rev: 10450 $');
    &RSVProbeBase::Set_ProbeSpecVersion ("0.91");

    ## Basic intro for the probe; This string will be used by Print_Usage ()
    &RSVProbeBase::Set_ProbeHelpIntro 
	("Probe to check whether Information services are configured. ");

    ## Additional options to print in Usage info used by Print_Usage ()
    &RSVProbeBase::Set_ProbeHelpOptions (" --worker-script-file </path/file>\n".
					 "                                  Default: \$VDT_LOCATION/osg-rsv/bin/probes/\n".
					 "                                   /worker-scripts/info-services-probe");

    ## Uncomment if you want additional command line options
    &RSVProbeBase::Extra_CLI_Option ("worker-script-file=s","infoServicesProbeWorkerScriptFile");
    
    ## Uncomment if you do not want detailsData to be trimmed to $o{'detailsDataMaxLength}
    &RSVProbeBase::Set_DetailsDataTrim ("False");
}


sub Run {
    
    &Process_Informational_Arguments ();

    &RSVProbeBase::Get_Remote_Env ();

    if (!defined($o{'infoServicesProbeWorkerScriptFile'})) {
        $o{'infoServicesProbeWorkerScriptFile'} = "$ENV{'VDT_LOCATION'}/osg-rsv/bin/probes/worker-scripts/info-services-probe";
    }

    my $metricname = &RSVProbeBase::Get_MetricName();

    ## Stage and run helper script that has the business logic using a Globus job
    &RSVProbeBase::Globus_Job_Run (" -s $o{'infoServicesProbeWorkerScriptFile'} -- --vdt-location $o{'REMOTE_ENV'}{'OSG_LOCATION'} --metric $metricname 2>/dev/null", "backtick");
    &Parse_Xml ("Attempted to test if Information Services ($metricname) on the CE is configured properly using  -s $o{'infoServicesProbeWorkerScriptFile'} -- --vdt-location $o{'REMOTE_ENV'}{'OSG_LOCATION'} --metric $metricname 2>/dev/null");

    ## The XML is stored in $o{'cmdOutHash'}. As can be seen in the helper script:
    ##  The XML will have elements ExitCode, StdOut, StdErr
    ##   StdOut will have tags MetricStatus (0,1,2,3) and DetailsData (text)
    ##   Passing those tags to &RSVProbeBase::Set_Summary_Metric_Results()
    &RSVProbeBase::Set_Summary_Metric_Results ($o{'cmdOutHash'}{'Metric'}{'WorkerScriptOutput'}{'ExitCode'}, $o{'cmdOutHash'}{'Metric'}{'WorkerScriptOutput'}{'StdOut'});

    &RSVProbeBase::Print_Metric();
}


sub Process_Informational_Arguments {
    my @metrics = ("consistency",
                   "freshness",
                   "lastrun",
                  );
    if (defined ($o{'listmetric'})) {
        ## Array probes within XML will have <probe>name</probe> elements
        foreach my $metricname (@metrics) {
            &RSVProbeBase::Set_MetricName("org.osg.gip.".$metricname);
            &RSVProbeBase::Set_EnableByDefault("true");
            ## Unix cron type metric interval 
            &RSVProbeBase::Set_MetricInterval (int(rand(60)). " * * * *");
            &RSVProbeBase::List_Summary_Metric();
        }
        exit 0;
    }
}

## Replicating this routine from RSVProbeBase for the time being to allow forcearray on 'probes'
sub Parse_Xml {
    my $err_string = "";
    $err_string    = $_[0] if ($_[0]);

    ## Now process worker script output from $o{'cmdOut'}
    my $xml = new XML::Simple (KeyAttr=>[]);

    # if data does not start with '<' XMLin will try to look for it as a file RT #6431
    if($o{'cmdOut'} !~ /^\s*</) {
        RSVProbeBase::Exit_Error(3, "$err_string\n" . 
                                 "Output could not be parsed as XML because it does not start " .
                                 "with a '<'.\nOutput:\n" . 
                                 "$o{'cmdOut'}");
    }

    %{$o{'cmdOutHash'}} = %{$xml->XMLin($o{'cmdOut'}, forcearray => [ 'probes' ])};
    &RSVProbeBase::Verbose (&Data::Dumper::Dumper($o{'cmdOutHash'}));

    &RSVProbeBase::Exit_Error (3,"$err_string\n"."Worker script exit code: $o{'cmdOutHash'}{'ExitCode'}\n".
                 "Worker script error Received via XML stderr element: \n".
                 &Data::Dumper::Dumper($o{'cmdOutHash'}{'Metric'}))
        if ($o{'cmdOutHash'}{'ExitCode'} != '0');

    return \%{$o{'cmdOutHash'}}
}


#!/usr/bin/env perl

###############################################################################
##
## Copyright 2009, Brookhaven National Laboratories 
##                 & The Trustees of Indiana University. 
##
## GUMS Development Team and Open Science Grid Operations Team, Indiana University
## Original Author: Jay Packard (BNL)
## Last modified by Arvind Gopu (on date shown in above Id line)
##
##
## This Perl script tests if we can authenticate using Globus to remote host 
## Type ./gums-authorization-validator-probe -h for more information
##
## REQUIRES
##  'RSV::Probe_Base'
##
################################################################################

######## Perl modules to use ######################################
use strict;
use RSVProbeBase;

######## Retrieve Global variables ################################
## And alias to RSV::Probe_Base variables

################################################
## COMMENT We use two hashes: 
##         - one for probe level details (examples:
##           gratiaScriptLocation, ls command location)
##         - second one for each metric in this probe
##           i.e metricName, metricStatus, detailsData, etc.
################################################

our %o;         *o         = \%RSVProbeBase::o;      
our %metric;    *metric    = \%RSVProbeBase::metric;

&RSVProbeBase::Init();
&RSVProbeBase::Run();

################################################################################
## Main Program ends ##
################################################################################


################################################################################
## Local Sub-Routines
################################################################################

sub Init {

    &RSVProbeBase::Set_MetricName ("org.osg.gums.authorization-status");

    ## Pass "status" or "performance" depending on metric type
    &RSVProbeBase::Set_MetricType ("status");
    &RSVProbeBase::Set_ServiceType ("OSG-GUMS");
    &RSVProbeBase::Set_ServiceVersion (">= OSG CE 1.0.0");
    &RSVProbeBase::Set_ProbeType ("OSG-GUMS");

    ## Should automating tools run this probe on above probeType by default?
    &RSVProbeBase::Set_EnableByDefault ("true");
    
    ## Unix cron type metric interval
    &RSVProbeBase::Set_MetricInterval ("26 3,9,15,21 * * *");

    ## Define this value from RCS/SVN version
    ## What version of the WLCG specification does this probe conform to?
    &RSVProbeBase::Set_ProbeRevision ('3.0');
    &RSVProbeBase::Set_ProbeSpecVersion ("0.91");

    ## Basic intro for the probe; This string will be used by Print_Usage ()
    &RSVProbeBase::Set_ProbeHelpIntro 
	("Probe to check a local site's authorization configuration by comparing the\n".
	 " FQAN-mapfile generated by gums with that from the OSG.  It also checks that\n".
	 " each account exists locally.");

    ## Additional options to print in Usage info used by Print_Usage ()
    &RSVProbeBase::Set_ProbeHelpOptions 
	(" [--osg-fqan-mapfile-url <url>]   URL for GOC maintained GUMS mapping file\n".
	 " [--avail-pool-acc-thresh <\#> ]   Available pool account threshold\n".
	 "                                    Default: 10\n".
	 " [--check-each-pool-account]      Check each pool account (Default: false)\n");

    ## Uncomment if you want additional command line options
    &RSVProbeBase::Extra_CLI_Option ("osg-fqan-mapfile-url|ofmu=s","osgFqanMapfileUrl");
    &RSVProbeBase::Extra_CLI_Option ("avail-pool-accounts-thresh|apat=s","availPoolAccountsThresh");
    &RSVProbeBase::Extra_CLI_Option ("check-each-pool-account|cepa=i","checkEachPoolAccount");

    ## Uncomment if you do not want detailsData to be trimmed to $o{'detailsDataMaxLength}
    &RSVProbeBase::Set_DetailsDataTrim ("False");
}


sub Run {

    ################################################
    ## BEGIN Main Chunk of code testing for this 
    ##       particular probe's metric
    ################################################

    ## Download OSG FQAN mapfile
    my $wget_cmd = "$o{'wgetCmd'} --no-check-certificate $o{'osgFqanMapfileUrl'} ".
	" -O $o{'osgGocLevelGumsFqanFile'} ".
	" 1>$o{'osgGocLevelGumsFqanFile'}.out 2> $o{'osgGocLevelGumsFqanFile'}.err";
    &RSVProbeBase::Run_Command ($wget_cmd, "backtick");
    &RSVProbeBase::Exit_Error_With_Cleanup(3, "ERROR: Couldn't download OSG GOC level FQAN mapfile from URL: $o{'osgFqanMapfileUrl'}.","\"$o{'osgGocLevelGumsFqanFile'}\", \"$o{'osgGocLevelGumsFqanFile'}.out\", \"$o{'osgGocLevelGumsFqanFile'}.err\"")     
	if ( $o{'cmdExitValue'} != 0 );

    # Read in osg fqan mapfile
    open(DAT, "$o{'osgGocLevelGumsFqanFile'}") || &RSVProbeBase::Exit_Error_With_Cleanup (2, "ERROR: Cannot open OSG GOC level FQAN mapfile$o{'osgGocLevelGumsFqanFile'}.","\"$o{'osgGocLevelGumsFqanFile'}\", \"$o{'osgGocLevelGumsFqanFile'}.out\", \"$o{'osgGocLevelGumsFqanFile'}.err\"");
    my @osg=<DAT>;
    close(DAT);
    &RSVProbeBase::Do_Unlink ("$o{'osgGocLevelGumsFqanFile'} $o{'osgGocLevelGumsFqanFile'}.out $o{'osgGocLevelGumsFqanFile'}.err");

    ## Generate local FQAN mapfile
    my $gums_cmd = " -s $o{'gumsWorkerScript'} $o{'proxyFile'} 2>&1";
    &RSVProbeBase::Globus_Job_Run ($gums_cmd, "backtick");
    &RSVProbeBase::Parse_Xml("Attempted to query gums using command [$gums_cmd]: $o{'cmdOut'}"); 
    &RSVProbeBase::Exit_Error_With_Cleanup(3, "ERROR: Could not retrieve site level FQAN mapfile: $o{'cmdOutHash'}{'StdErr'}","\"$o{'siteLevelGumsFqanFile'}\"")
        if ( $o{'cmdOutHash'}{'StdErr'} );

    ## Read in site fqan mapfile
    my @local = split(/\n/, $o{'cmdOutHash'}{'StdOut'});

    # Compare two fqan mapfiles
    my $osgLine;
    my @errors;
    my @warnings;
    foreach $osgLine(@osg) {
	if (('trim($osgLine)' eq '') || ('trim($osgLine)' eq '\#')) {
	    next;
	}
	
	my @osgTolkens = split(/ /, $osgLine);
	
	if ((scalar @osgTolkens) lt 2) {
	    next;
	}
	
	my $osgFqan = $osgTolkens[0];
	$osgFqan =~ s/\"//g;
	my $matchFound = 0;

	my $localLine;
	foreach $localLine(@local) {
	    if (('trim($localLine)' eq '') || ('trim($localLine)' eq '\#')) {
		next;
	    }

	    my @localTolkens = split(/ /, $localLine);
	    
	    if ((scalar @localTolkens) lt 2) {
		next;
	    }
	    
	    my $localFqan = $localTolkens[0];
	    $localFqan =~ s/\"//g;

	    if ("$osgFqan" eq "$localFqan") {
		$matchFound = 1;
		
		my $osgAccountsStr = trim($osgLine);
		$osgAccountsStr =~ s/\"$osgFqan\" //g;
		my $isOsgPoolAccount = 0;
		if( $osgAccountsStr =~ m/.*\(\d+\/\d+\)$/ ) {
		    $isOsgPoolAccount = 1;
		}
		
		my $avail = 0;
                my $total = 0;
                my $isLocalPoolAccount = 0;
		my $localAccountsStr = trim($localLine);
		$localAccountsStr =~ s/\"$localFqan\" //g;

		my @localAccounts = split(/, /, $localAccountsStr);
		foreach (@localAccounts) {
		    my $localAccount = trim($_);
 		    if( $localAccount =~ m/(.*)\((\d+)\/(\d+)\)$/ ) {
                        $isLocalPoolAccount = 1;
                        $total += int($3);
                        $avail += ($total - int($2));
			$localAccount = trim($1);
                    }
		    if (lc("$localAccount") eq lc('null')) {
                   	push(@errors, " ERROR: FQAN $localFqan maps to null account");
                    }
		    if (not $isLocalPoolAccount) {
                        if (not accountExists($localAccount)) {
                            push(@errors, " ERROR: Account $localAccount mapped from $localFqan does not exist");
                        }
                    }
		    if ($isLocalPoolAccount) {
			my $accountRange = $localAccount;
			my $root;
                        while( $accountRange =~ m/(\D*)(\d+)-(\d+),?(.*)/) {
			    if (trim($1) ne "") {
                            	$root = trim($1);
			    }
                            my $start = int($2);
                            my $len = length($2);
                            my $end = int($3);
                            for (my $count = $start; $count <= $end; $count++) {
                                my $padded = sprintf("%0". $len . "d",$count);
                                my $account = "$root$padded";
			        if (not accountExists("$account")) {
                                    push(@errors, " ERROR: Account $account does not exist");
                                }
				if (not $o{'checkEachPoolAccount'}) {
	                            last;
				}
                            }
			    $accountRange = $4;
                            if (not $o{'checkEachPoolAccount'}) {
			        last;
                            }
                        }
                    }
		}
		   
		if ($isLocalPoolAccount && (not $isOsgPoolAccount)) {
		   push(@warnings, " WARNING: Pool account found for FQAN $localFqan, but OSG expects a group account for this FQAN");
		}				
		elsif ((not $isLocalPoolAccount) && $isOsgPoolAccount) {
		   push(@warnings, " WARNING: Group account found for FQAN $localFqan, but OSG expects a pool account for this FQAN");
		}

		if ($isLocalPoolAccount) {
		   if (($total - $avail) eq 0) {
                       push(@errors, " ERROR: No free pool accounts exist for FQAN $localFqan");
                   }
                   ## elsif (($total - $avail) lt $o{'availPoolAccountsThresh'}) {
		   ## Modified per request from Richard Jones after John Hover confirmed this is appropriate --agopu 2009-09-29
		   elsif ($avail lt $o{'availPoolAccountsThresh'}) {
                       push(@warnings, " WARNING: Low number of free pool accounts available for FQAN $localFqan");
                   }
                }
	
	    }
	}
	if ($matchFound eq 0) {
	    if ("$osgFqan" =~ "/mis/") {
		push(@errors, " ERROR: FQAN /mis/ was not found and is required by OSG");
	    }
	    else {
		push(@warnings, " WARNING: Site configuration of GUMS does not support OSG-sponsored FQAN $osgFqan");
	    } 
	}
    }

    # set summaryData via Set_Summary_Metric_Results and detailsData
    &RSVProbeBase::Exit_Error (2,"ERROR: Authorization is not properly configured\n".join("\n",@errors)."\n".join("\n",@warnings)) 
	if ((scalar @errors) gt 0);
    &RSVProbeBase::Exit_Error (1,"WARNING: Authorization may require reconfiguration\n".join("\n",@warnings))
	if ((scalar @warnings) gt 0);
    
    &RSVProbeBase::Set_Summary_Metric_Results (0,"GUMS configuration looks OK");
    &RSVProbeBase::Print_Metric();
}


################################################################################
## Begin Other Local Sub Routines
################################################################################
sub accountExists {
    my $account = shift;
    my $output = `id $account 2>/dev/null`;
    return (length(trim($output)) > 0);
}

sub trim($) {
    my $string = shift;
    $string =~ s/^\s+//;
    $string =~ s/\s+$//;
    return $string;
}
################################################################################
## End Other Local Sub Routines
################################################################################

